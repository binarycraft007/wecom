// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddCustomerServiceAccount(params *AddCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCustomerServiceAccountOK, error)

	DelCustomerServiceAccount(params *DelCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelCustomerServiceAccountOK, error)

	GetToken(params *GetTokenParams, opts ...ClientOption) (*GetTokenOK, error)

	ListCustomerServiceAccount(params *ListCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerServiceAccountOK, error)

	UpdateCustomerServiceAccount(params *UpdateCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerServiceAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddCustomerServiceAccount add customer service account
*/
func (a *Client) AddCustomerServiceAccount(params *AddCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddCustomerServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCustomerServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addCustomerServiceAccount",
		Method:             "POST",
		PathPattern:        "/kf/account/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCustomerServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCustomerServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddCustomerServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DelCustomerServiceAccount delete customer service account
*/
func (a *Client) DelCustomerServiceAccount(params *DelCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DelCustomerServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDelCustomerServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delCustomerServiceAccount",
		Method:             "POST",
		PathPattern:        "/kf/account/del",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DelCustomerServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DelCustomerServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DelCustomerServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetToken get access token using corpid and secret
*/
func (a *Client) GetToken(params *GetTokenParams, opts ...ClientOption) (*GetTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getToken",
		Method:             "GET",
		PathPattern:        "/gettoken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListCustomerServiceAccount list customer service account
*/
func (a *Client) ListCustomerServiceAccount(params *ListCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomerServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCustomerServiceAccount",
		Method:             "POST",
		PathPattern:        "/kf/account/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomerServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomerServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListCustomerServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCustomerServiceAccount update customer service account
*/
func (a *Client) UpdateCustomerServiceAccount(params *UpdateCustomerServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomerServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomerServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCustomerServiceAccount",
		Method:             "POST",
		PathPattern:        "/kf/account/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomerServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomerServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCustomerServiceAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
