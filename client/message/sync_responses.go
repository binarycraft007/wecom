// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/wecom/models"
)

// SyncReader is a Reader for the Sync structure.
type SyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSyncDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSyncOK creates a SyncOK with default headers values
func NewSyncOK() *SyncOK {
	return &SyncOK{}
}

/*
SyncOK describes a response with status code 200, with default header values.

sync message response
*/
type SyncOK struct {
	Payload *models.SyncReponse
}

// IsSuccess returns true when this sync o k response has a 2xx status code
func (o *SyncOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync o k response has a 3xx status code
func (o *SyncOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync o k response has a 4xx status code
func (o *SyncOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync o k response has a 5xx status code
func (o *SyncOK) IsServerError() bool {
	return false
}

// IsCode returns true when this sync o k response a status code equal to that given
func (o *SyncOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the sync o k response
func (o *SyncOK) Code() int {
	return 200
}

func (o *SyncOK) Error() string {
	return fmt.Sprintf("[POST /kf/sync_msg][%d] syncOK  %+v", 200, o.Payload)
}

func (o *SyncOK) String() string {
	return fmt.Sprintf("[POST /kf/sync_msg][%d] syncOK  %+v", 200, o.Payload)
}

func (o *SyncOK) GetPayload() *models.SyncReponse {
	return o.Payload
}

func (o *SyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SyncReponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncDefault creates a SyncDefault with default headers values
func NewSyncDefault(code int) *SyncDefault {
	return &SyncDefault{
		_statusCode: code,
	}
}

/*
SyncDefault describes a response with status code -1, with default header values.

unexpected error
*/
type SyncDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this sync default response has a 2xx status code
func (o *SyncDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this sync default response has a 3xx status code
func (o *SyncDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this sync default response has a 4xx status code
func (o *SyncDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this sync default response has a 5xx status code
func (o *SyncDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this sync default response a status code equal to that given
func (o *SyncDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the sync default response
func (o *SyncDefault) Code() int {
	return o._statusCode
}

func (o *SyncDefault) Error() string {
	return fmt.Sprintf("[POST /kf/sync_msg][%d] sync default  %+v", o._statusCode, o.Payload)
}

func (o *SyncDefault) String() string {
	return fmt.Sprintf("[POST /kf/sync_msg][%d] sync default  %+v", o._statusCode, o.Payload)
}

func (o *SyncDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *SyncDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
