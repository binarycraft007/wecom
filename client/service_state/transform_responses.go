// Code generated by go-swagger; DO NOT EDIT.

package service_state

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/binarycraft007/wecom/models"
)

// TransformReader is a Reader for the Transform structure.
type TransformReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TransformReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTransformOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewTransformDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTransformOK creates a TransformOK with default headers values
func NewTransformOK() *TransformOK {
	return &TransformOK{}
}

/*
TransformOK describes a response with status code 200, with default header values.

transform service state response
*/
type TransformOK struct {
	Payload *models.TransformServiceStateReponse
}

// IsSuccess returns true when this transform o k response has a 2xx status code
func (o *TransformOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this transform o k response has a 3xx status code
func (o *TransformOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this transform o k response has a 4xx status code
func (o *TransformOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this transform o k response has a 5xx status code
func (o *TransformOK) IsServerError() bool {
	return false
}

// IsCode returns true when this transform o k response a status code equal to that given
func (o *TransformOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the transform o k response
func (o *TransformOK) Code() int {
	return 200
}

func (o *TransformOK) Error() string {
	return fmt.Sprintf("[POST /kf/service_state/trans][%d] transformOK  %+v", 200, o.Payload)
}

func (o *TransformOK) String() string {
	return fmt.Sprintf("[POST /kf/service_state/trans][%d] transformOK  %+v", 200, o.Payload)
}

func (o *TransformOK) GetPayload() *models.TransformServiceStateReponse {
	return o.Payload
}

func (o *TransformOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransformServiceStateReponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTransformDefault creates a TransformDefault with default headers values
func NewTransformDefault(code int) *TransformDefault {
	return &TransformDefault{
		_statusCode: code,
	}
}

/*
TransformDefault describes a response with status code -1, with default header values.

unexpected error
*/
type TransformDefault struct {
	_statusCode int

	Payload *models.ErrorModel
}

// IsSuccess returns true when this transform default response has a 2xx status code
func (o *TransformDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this transform default response has a 3xx status code
func (o *TransformDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this transform default response has a 4xx status code
func (o *TransformDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this transform default response has a 5xx status code
func (o *TransformDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this transform default response a status code equal to that given
func (o *TransformDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the transform default response
func (o *TransformDefault) Code() int {
	return o._statusCode
}

func (o *TransformDefault) Error() string {
	return fmt.Sprintf("[POST /kf/service_state/trans][%d] transform default  %+v", o._statusCode, o.Payload)
}

func (o *TransformDefault) String() string {
	return fmt.Sprintf("[POST /kf/service_state/trans][%d] transform default  %+v", o._statusCode, o.Payload)
}

func (o *TransformDefault) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *TransformDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
