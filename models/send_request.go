// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SendRequest send request
//
// swagger:model SendRequest
type SendRequest struct {

	// msgid
	Msgid string `json:"msgid,omitempty"`

	// msgtype
	Msgtype string `json:"msgtype,omitempty"`

	// open kfid
	OpenKfid string `json:"open_kfid,omitempty"`

	// text
	Text *SendRequestText `json:"text,omitempty"`

	// touser
	Touser string `json:"touser,omitempty"`
}

// Validate validates this send request
func (m *SendRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendRequest) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if m.Text != nil {
		if err := m.Text.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this send request based on the context it is used
func (m *SendRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateText(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendRequest) contextValidateText(ctx context.Context, formats strfmt.Registry) error {

	if m.Text != nil {
		if err := m.Text.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendRequest) UnmarshalBinary(b []byte) error {
	var res SendRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendRequestText send request text
//
// swagger:model SendRequestText
type SendRequestText struct {

	// content
	Content string `json:"content,omitempty"`
}

// Validate validates this send request text
func (m *SendRequestText) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this send request text based on context it is used
func (m *SendRequestText) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SendRequestText) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendRequestText) UnmarshalBinary(b []byte) error {
	var res SendRequestText
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
