// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncReponse sync reponse
//
// swagger:model SyncReponse
type SyncReponse struct {

	// errcode
	// Required: true
	Errcode *int32 `json:"errcode"`

	// errmsg
	// Required: true
	Errmsg *string `json:"errmsg"`

	// has more
	HasMore int32 `json:"has_more,omitempty"`

	// msg list
	MsgList []*Message `json:"msg_list"`

	// next cursor
	NextCursor string `json:"next_cursor,omitempty"`
}

// Validate validates this sync reponse
func (m *SyncReponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrmsg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsgList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncReponse) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("errcode", "body", m.Errcode); err != nil {
		return err
	}

	return nil
}

func (m *SyncReponse) validateErrmsg(formats strfmt.Registry) error {

	if err := validate.Required("errmsg", "body", m.Errmsg); err != nil {
		return err
	}

	return nil
}

func (m *SyncReponse) validateMsgList(formats strfmt.Registry) error {
	if swag.IsZero(m.MsgList) { // not required
		return nil
	}

	for i := 0; i < len(m.MsgList); i++ {
		if swag.IsZero(m.MsgList[i]) { // not required
			continue
		}

		if m.MsgList[i] != nil {
			if err := m.MsgList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msg_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msg_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sync reponse based on the context it is used
func (m *SyncReponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMsgList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncReponse) contextValidateMsgList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MsgList); i++ {

		if m.MsgList[i] != nil {
			if err := m.MsgList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("msg_list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("msg_list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncReponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncReponse) UnmarshalBinary(b []byte) error {
	var res SyncReponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
